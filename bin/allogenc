#!/usr/bin/env python

# Copyright (c) 2017, Allogica
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither the name of Allogen nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os, sys

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from allogen.bridge.frontend.Compiler import *
import os
import argparse

parser = argparse.ArgumentParser()

parser.add_argument('sources', nargs='+', type=str)

parser.add_argument('-I', metavar='dir', nargs='+', type=str, dest='include_path', default=[])
parser.add_argument('--target-dir', metavar='dir', nargs='?', type=str, dest='target_dir',
                    default=os.path.join(os.path.curdir, 'target'))
parser.add_argument('--bridge-dir', metavar='dir', nargs='?', type=str, dest='bridge_dir',
                    default=os.path.join(os.path.curdir, 'bridge'))

parser.add_argument('--target', metavar='language', required=True, type=str, dest='language')

parser.add_argument('--print-products', action='store_const', const='print_products', dest='action')

args = parser.parse_args()

for source in args.sources:
    compiler = Compiler()
    compiler.compile_file(
        os.path.join(os.path.dirname(__file__), source),
        target_out_dir=os.path.join(os.path.dirname(__file__), args.target_dir),
        bridge_out_dir=os.path.join(os.path.dirname(__file__), args.bridge_dir),
        include_directories=args.include_path,
        target=args.language
    )
