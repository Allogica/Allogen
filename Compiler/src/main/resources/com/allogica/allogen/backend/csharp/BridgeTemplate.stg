/*
 * Copyright (c) 2017, Allogica
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright notice,
 *       this list of conditions and the following disclaimer in the documentation
 *       and/or other materials provided with the distribution.
 *     * Neither the name of Allogen nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import "CSharp.stg"

header(class) ::= <<
<codegen_notice()>

#pragma once

#include \<Allogen/CSharp.hpp>

<class.idlClass.includes:{include|
#include <if(include.quoted)>"<else>\<<endif><include.value><if(include.quoted)>"<\n><else>\><endif>}>
<class.usedTypes:{usedType|<if(usedType.userDefinedClass)>#include "<usedType.userDefinedClass.bridgeHeaderOutputFile>"<\n><endif>}>

<if(!class.static)>
ALLOGEN_BRIDGED_CLASS(<class.fullyQualifiedName>)
<endif>
>>

implementation(class) ::= <<
<codegen_notice()>

#include "<class.bridgeHeaderOutputFile>"

using namespace Allogen::CSharp;

<class.namespaces:namespace_begin(); separator=" ">

    <class.constructors:constructor(class); separator="\n\n">
    <destructor(class.destructor, class)>
    <class.methods:method(class); separator="\n\n">
    <class.inheritedMethods:method(class); separator="\n\n">

<class.namespaces:namespace_end()>
>>

namespace_begin(ns) ::= "namespace <ns> {"
namespace_end(ns) ::= "}"

constructor(constructor, class) ::= <<
<if(!constructor.csSkip)>
extern "C" ALLOGEN_EXPORT
std::shared_ptr\<<class.fullyQualifiedName>\>* ALLOGEN_CALL
<constructor.csEntryPoint>(<constructor.arguments:{argument|<typename(argument.type)> <argumentName(argument)>}; separator=", ">) {
    <bridgedConstructor(constructor, class)>
}
<endif>
>>

destructor(destructor, class) ::= <<
<if(!class.static)>
extern "C" ALLOGEN_EXPORT
void ALLOGEN_CALL
<destructor.csEntryPoint>(std::shared_ptr\<<class.fullyQualifiedName>\>* csthis) {
    <bridgedDestructor(destructor, class)>
}
<endif>
>>

method(method, class) ::= <<
<if(!method.csSkip)>
extern "C" ALLOGEN_EXPORT
<if(method.returnType.csTranslatedReturnType)>void<else><typename(method.returnType)><endif> ALLOGEN_CALL
<method.csEntryPoint>(<if(!method.static)>std::shared_ptr\<<class.fullyQualifiedName>\>* csthis<if(method.arguments || method.returnType.csTranslatedReturnType)>, <endif><endif>
<if(method.returnType.csTranslatedReturnType)><translatedReturnArgs(method.returnType)><if(method.arguments)>, <endif><endif>
<if(method.arguments)>
<method.arguments:{argument|<typename(argument.type)> <argumentName(argument)>}; separator=", "><endif>) {
    <if(!method.static)><bridgedMethod(method, class)><else><bridgedStaticMethod(method, class)><endif>
}
<endif>
>>


bridgedConstructor(constructor, class) ::= <<
return BridgedConstructor\<<class.fullyQualifiedName>(<constructor.arguments:{arg|<nativeType(arg.type)>}; separator=", ">)>::call(
    [](<constructor.arguments:{argument|<nativeType(argument.type)> <argument.name>}; separator=", ">) {
    <if(constructor.body)>
        <constructor.body>
    <else>
        return new <class.name>(<constructor.arguments:{argument|<argument.name>}; separator=", ">);
    <endif>
    }<if(constructor.arguments)>, <constructor.arguments:forwardArgument(); separator=", "><endif>
);
>>

bridgedDestructor(destructor, class) ::= <<
BridgedMethod\<<class.fullyQualifiedName>, void()>::call(
    csthis,
    [](<class.fullyQualifiedName> *wself) {
    <if(destructor.body)>
        <destructor.body>
    <else>
        // delete wself;
    <endif>
    }
);
>>

bridgedMethod(method, class) ::= <<
<if(!method.csSkip)>
<if(method.returnType.csTranslatedReturnType)>auto ret =<else>return<endif> BridgedMethod\<<class.fullyQualifiedName>, <nativeType(method.returnType)>(<method.arguments:{arg|<nativeType(arg.type)>}; separator=", ">)>::call(
    csthis,
    [](<class.fullyQualifiedName> *wself<if(method.arguments)>, <method.arguments:{argument | <nativeType(argument.type)> <argument.name>}; separator=", "><endif>) {
    <if(method.body)>
        <method.body>
    <else>
        return wself-><method.name>(<method.arguments:{argument|<argument.name>}; separator=", ">);
    <endif>
    }<if(method.arguments)>, <method.arguments:forwardArgument(); separator=", "><endif>
);
<if(method.returnType.csTranslatedReturnType)>
<translatedReturnUnwrap(method.returnType)>
<endif>
<endif>
>>

bridgedStaticMethod(method, class) ::= <<
return BridgedMethod\<void, <nativeType(method.returnType)>(<method.arguments:{arg|<nativeType(arg.type)>}; separator=", ">)>::call(
    [](<method.arguments:{argument | <nativeType(argument.type)> <argument.name>}; separator=", ">) {
    <if(method.body)>
        <method.body>
    <else>
        return <class.fullyQualifiedName>::<method.name>(<method.arguments:{argument|<argument.name>}; separator=", ">);
    <endif>
    }<if(method.arguments)>, <method.arguments:forwardArgument(); separator=", "><endif>
);
>>

primitiveType(type) ::= "<nativeType(type)>"
userDefinedType(type) ::= "std::shared_ptr\<<nativeType(type)>>*"
stringType(type) ::= "const char*"
lambdaType(type) ::= "void*"
optionalType(type) ::= "<typename(type.resolvedType.containedType)>"
sharedPtrType(type) ::= "<typename(type.resolvedType.containedType)>"
vectorType(type) ::= "void*"
mapType(type) ::= "void*"
bufferType(type) ::= "unsigned char*"
dateType(type) ::= "long"

translatedReturnArgsTemplateName_(type) ::= "<type.resolvedType.templateName>TranslatedReturnArgs"
translatedReturnArgs(type) ::= "<(translatedReturnArgsTemplateName_(type))(type)>"
bufferTypeTranslatedReturnArgs(type) ::= <%
    const unsigned char** csretValue, uint64_t* csretSize
%>

translatedReturnUnwrapTemplateName_(type) ::= "<type.resolvedType.templateName>TranslatedReturnUnwrap"
translatedReturnUnwrap(type) ::= "<(translatedReturnUnwrapTemplateName_(type))(type)>"
bufferTypeTranslatedReturnUnwrap(type) ::= <%
    *csretValue = ret.first;
    *csretSize = ret.second;
%>
