/*
 * Copyright (c) 2017, Allogica
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright notice,
 *       this list of conditions and the following disclaimer in the documentation
 *       and/or other materials provided with the distribution.
 *     * Neither the name of Allogen nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import "ObjectiveC.stg"

class(class) ::= <<
<codegen_notice()>

#import \<Foundation/Foundation.h>

<class.usedTypes:{usedType|
<if(usedType.userDefinedClass)>#import "<usedType.userDefinedClass.targetOutputFile>"<\n><endif>}>

<documentation(class)>
@interface <class.objcName> : NSObject

<if(class.objcProperties)><class.objcProperties.values:property()><endif>
<if(class.constructors)><class.constructors:constructor(class); separator="\n\n"><\ ><endif>
<if(class.destructor)><class.destructor:destructor(class); separator="\n\n"><\n><endif>
<if(class.methods)><class.methods:method(class); separator="\n\n"><endif>

@end
>>

constructor(constructor, class) ::= <<
<documentation(constructor)>
<methodSignature(constructor)>;
>>

destructor(destructor, class) ::= <<
<documentation(destructor)>
-(void)dealloc;
>>

method(method, class, native=true) ::= <<
<documentation(method)>
<methodSignature(method)>;
>>

property(property) ::= "@property (<if(!property.setter)>readonly, <endif>nonatomic, assign, getter=<property.getter.objcName><if(!property.setter)>, getter=<property.setter.objcName><endif>) <typename(property.getter.returnType)> <property.name>;"