/*
 * Copyright (c) 2017, Allogica
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright notice,
 *       this list of conditions and the following disclaimer in the documentation
 *       and/or other materials provided with the distribution.
 *     * Neither the name of Allogen nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import "../Allogen.stg"

methodSignature(method) ::= "<if(method.static)>+<else>-<endif>(<if(method.returnType)><typename(method.returnType)><else>id<endif>)<method.objcName><arguments(method, class)>"
arguments(method, class) ::= <%<method.arguments:argument(method, class); separator=" ">%>
argument(argument, method, class) ::= "<argument.objSignatureName>:(<typename(argument.type)>)<argumentName(argument)>"

primitiveType(type) ::= "<cppTypeMapping.(type.name)>"
userDefinedType(type) ::= "<type.resolvedType.userDefinedClass.objcName>*"
stringType(type) ::= "NSString*"
lambdaType(type) ::= <% <if(type.resolvedType.returnType)><typename(type.resolvedType.returnType)><else>void<endif>(^)(<type.resolvedType.arguments:{arg|<typename(arg.type)>}; separator=", ">) %>

bridgedConstructor(constructor, class) ::= <<
if(self) {
    BridgedConstructor\<<class.fullyQualifiedName>(<constructor.arguments:{arg|<nativeType(arg.type)>}; separator=", ">)>::call(
        self,
        [](<constructor.arguments:{argument|<nativeType(argument.type)> <argument.name>}; separator=", ">) {
        <if(constructor.body)>
            <constructor.body>
        <else>
            return new <class.fullyQualifiedName>(<constructor.arguments:{argument|<argument.name>}; separator=", ">);
        <endif>
        }<if(constructor.arguments)>, <constructor.arguments:forwardArgument(); separator=", "><endif>
    );
}
return self;
>>

bridgedDestructor(destructor, class) ::= <<
BridgedMethod\<<class.fullyQualifiedName>, void()>::call(
    self,
    [](<class.fullyQualifiedName>* wself) {
    <if(destructor.body)>
        <destructor.body>
    <else>
        delete wself;
    <endif>
    }
);
[super dealloc];
>>

bridgedMethod(method, class) ::= <<
return BridgedMethod\<<class.fullyQualifiedName>, <nativeType(method.returnType)>(<method.arguments:{arg|<nativeType(arg.type)>}; separator=", ">)>::call(
    self,
    [](<class.fullyQualifiedName>* wself<if(method.arguments)>, <method.arguments:{argument | <nativeType(argument.type)> <argument.name>}; separator=", "><endif>) {
    <if(method.body)>
        <method.body>
    <else>
        return wself-><method.name>(<method.arguments:{argument|<argument.name>}; separator=", ">);
    <endif>
    }<if(method.arguments)>, <method.arguments:forwardArgument(); separator=", "><endif>
);
>>

bridgedStaticMethod(method, class) ::= <<
return BridgedMethod\<<class.fullyQualifiedName>, <nativeType(method.returnType)>(<method.arguments:{arg|<nativeType(arg.type)>}; separator=", ">)>::call(
    [](<method.arguments:{argument|<nativeType(argument.type)> <argument.name>}; separator=", ">) {
    <if(method.body)>
        <method.body>
    <else>
        return <class.fullyQualifiedName>::<method.name>(<method.arguments:{argument|<argument.name>}; separator=", ">);
    <endif>
    }<if(method.arguments)>, <method.arguments:forwardArgument(); separator=", "><endif>
);
>>